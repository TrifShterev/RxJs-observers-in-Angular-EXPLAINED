{"id":"index.js","dependencies":[{"name":"D:\\AngularUdemy\\RxJs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"rxjs","loc":{"line":1,"column":51,"index":51},"parent":"D:\\AngularUdemy\\RxJs\\src\\index.js","resolved":"D:\\AngularUdemy\\RxJs\\node_modules\\rxjs\\dist\\esm5\\index.js"},{"name":"rxjs/operators","loc":{"line":2,"column":93,"index":153},"parent":"D:\\AngularUdemy\\RxJs\\src\\index.js","resolved":"D:\\AngularUdemy\\RxJs\\node_modules\\rxjs\\dist\\esm5\\operators\\index.js"},{"name":"rxjs/ajax","loc":{"line":3,"column":21,"index":193},"parent":"D:\\AngularUdemy\\RxJs\\src\\index.js","resolved":"D:\\AngularUdemy\\RxJs\\node_modules\\rxjs\\dist\\esm5\\ajax\\index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\nvar _operators = require(\"rxjs/operators\");\nvar _ajax = require(\"rxjs/ajax\");\n//MORE RxJs observables with diagrams at https://rxmarbles.com/\n\n//fromEvent - works as event listener\n// const observable = fromEvent(document, 'click');\n\n//interval() - calls observable on interval of time\n// const observable = interval(1000);\n\n//timer() - sets timer 1 argument) - timeInterval or date before the interval of repetitions starts\n//2 argument) - time between the repetitions\n// const observable = timer(1000,1000);\n\n//\"of\" will iterate over the values we add as he create observer and synchronously call observer push the value and complete it\n//before start pushing next value if we add array it reads it as 1 elemnt\n//const observable = of(1,2,3,4,5);\n\n//\"from\" is very POWERFUL operator work same way as \"of\" but works with arrays,promises, AsyncIterable and iterable streams \n//const observable = from([1,2,3,4,5])\n//it can also fetch() data from server\n//const observable = from(fetch('https://jsonplaceholder.typicode.com/todos/1'))\n\n//map() - can manipulate any passed value via so called pipe-function\n// const observable = of(1,2,3,4,5).pipe(\n//     //add $ in front of every number\n//     map((x) => `$${x}`)\n// )\n\n//pluck('propertyName') - pluck() gives us the value from  given property name in object\n// const observable = fromEvent(document, 'keydown').pipe(\n//     pluck('code')\n// )\n// same as:\n// const observable = fromEvent(document, 'keydown').pipe(\n//     map(event => event.code)\n// )\n\n//filter() - filters by given criterias\n// const observable = fromEvent(document, 'keydown'\n// ).pipe(\n//          pluck('code'),\n//          filter(code => code === 'Space')\n//     )\n\n//reduce() - adds values to accumulator , second argument is the starting value of accumulator in this case is '0'\n//reduce waits until observer adds all the values and then returns value\n// const observable = of(1,2,3,4,5).pipe(\n//     reduce((acc, value) => acc + value ,0)\n// )\n\n//take(5) - takes the first 5 elements given to observeble\n// const observable = interval(500\n//     ).pipe(\n//         take(5),\n//         reduce((acc, value) => acc + value ,0)\n//     )\n\n//scan() works same as reduce() but doesn't wait for observerble to complete and returns everu accumulated value.\n//it helps to check every accumulated value!!!\n// const observable = interval(500\n//     ).pipe(\n//         take(5),\n//         scan((acc, value) => acc + value ,0)\n//     )\n\n//tap() - everything what happens in pipeline can be observed with this operator as it ignores all changes\n// it make's it perfect for debuging.\n// const observable = interval(500\n//     ).pipe(\n//         take(5),\n//         tap(console.log),\n//         reduce((acc, value) => acc + value ,0)\n//     )\n//tap() can accept objects too(same result as above):\n// const observable = interval(500\n//     ).pipe(\n//         take(5),\n//         tap({\n//             next(val){console.log(val)}\n//         }),\n//         reduce((acc, value) => acc + value ,0)\n//     )\n\n//mergeMap() -\n//example 1) works as map() but gets/handles also the result from the server (while map() just makes request in this case)\nvar button = document.querySelector('#btn');\n// const observable = fromEvent(\n//     button, 'click' \n// ).pipe(\n//     mergeMap(() => {\n//         return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1')\n//     })\n// )\n//example 2) mergeMap() will always subscribe to any inner observable which can lead to memory leaks\n// const observable = fromEvent(\n//     button, 'click' \n// ).pipe(\n//     mergeMap(() => {\n//         return interval(1000).pipe(\n//              tap(console.log),\n//                 take(5)\n//                 )\n//     })\n// )\n//as we see once started will never stop it will return value and continue to subscribe on every click\n//thats why we have to use something like take() after it to make it stop in some conditions\n\n//switchMap() - works as mergeMap() but understants when inner observeble is completed\n// is perfect to manage one observebla at a time \n//very useful for managing server reguests because if user click twice on a button insted to make 2 requests switchMap() will cancel the first request\n// const observable = fromEvent(\n//     button, 'click' \n// ).pipe(\n//     switchMap(() => {\n//         return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\n//             take(5),\n//              tap({ \n//                 complete() {console.log('inner observable completed')}\n//              }),\n//                 )\n//     })\n// )\n\n//concatMap() - works similary as switchMap() but instead canceling the second observable, puts it on a queue and when the first is ready starts the second one\n//like that we can manage multiply observables without canceling any of them\n//for example if we wanna send many requests one after another to the server\n\n// const observable = fromEvent(\n//     button, 'click' \n// ).pipe(\n//     concatMap(() => {\n//         return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\n//             take(5),\n//              tap({ \n//                 complete() {console.log('inner observable completed')}\n//              }),\n//                 )\n//     })\n// )\n\n//exhaustMap() - ignores second observable useful to prevent multiply form submisions via double click\n\nvar observable = (0, _rxjs.fromEvent)(button, 'click').pipe((0, _operators.exhaustMap)(function () {\n  return _ajax.ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe((0, _operators.take)(5), (0, _operators.tap)({\n    complete: function complete() {\n      console.log('inner observable completed');\n    }\n  }));\n}));\nvar subscription = observable.subscribe(console.log);\n\n//Conclusion(recap flattening operators) \n//Let's say you are chef and you are woking on a order but in that time \n//more orders comming if you use:\n//switchMap() - you should stop working on the curent order and start the new one \n//this way only tha latest order will ever be finished\n\n//concstMap() - the order gets added to a queue. finishing the current will start next one\n\n//mergeMap() - You will work on all orders at the same time as soon as you get them.\n\n//exhaustMap() - You ignore new orders and finish the current order. Once you finished you are free to accept new one."},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":6,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":8,"column":0},"source":"index.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":8,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":10,"column":0}},{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":11,"column":0}},{"generated":{"line":14,"column":0},"source":"index.js","original":{"line":13,"column":0}},{"generated":{"line":15,"column":0},"source":"index.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":18,"column":0},"source":"index.js","original":{"line":17,"column":0}},{"generated":{"line":19,"column":0},"source":"index.js","original":{"line":18,"column":0}},{"generated":{"line":20,"column":0},"source":"index.js","original":{"line":19,"column":0}},{"generated":{"line":22,"column":0},"source":"index.js","original":{"line":21,"column":0}},{"generated":{"line":23,"column":0},"source":"index.js","original":{"line":22,"column":0}},{"generated":{"line":24,"column":0},"source":"index.js","original":{"line":23,"column":0}},{"generated":{"line":25,"column":0},"source":"index.js","original":{"line":24,"column":0}},{"generated":{"line":27,"column":0},"source":"index.js","original":{"line":26,"column":0}},{"generated":{"line":28,"column":0},"source":"index.js","original":{"line":27,"column":0}},{"generated":{"line":29,"column":0},"source":"index.js","original":{"line":28,"column":0}},{"generated":{"line":30,"column":0},"source":"index.js","original":{"line":29,"column":0}},{"generated":{"line":31,"column":0},"source":"index.js","original":{"line":30,"column":0}},{"generated":{"line":33,"column":0},"source":"index.js","original":{"line":33,"column":0}},{"generated":{"line":34,"column":0},"source":"index.js","original":{"line":34,"column":0}},{"generated":{"line":35,"column":0},"source":"index.js","original":{"line":35,"column":0}},{"generated":{"line":36,"column":0},"source":"index.js","original":{"line":36,"column":0}},{"generated":{"line":37,"column":0},"source":"index.js","original":{"line":37,"column":0}},{"generated":{"line":38,"column":0},"source":"index.js","original":{"line":38,"column":0}},{"generated":{"line":39,"column":0},"source":"index.js","original":{"line":39,"column":0}},{"generated":{"line":40,"column":0},"source":"index.js","original":{"line":40,"column":0}},{"generated":{"line":42,"column":0},"source":"index.js","original":{"line":43,"column":0}},{"generated":{"line":43,"column":0},"source":"index.js","original":{"line":44,"column":0}},{"generated":{"line":44,"column":0},"source":"index.js","original":{"line":45,"column":0}},{"generated":{"line":45,"column":0},"source":"index.js","original":{"line":46,"column":0}},{"generated":{"line":46,"column":0},"source":"index.js","original":{"line":47,"column":0}},{"generated":{"line":47,"column":0},"source":"index.js","original":{"line":48,"column":0}},{"generated":{"line":49,"column":0},"source":"index.js","original":{"line":50,"column":0}},{"generated":{"line":50,"column":0},"source":"index.js","original":{"line":51,"column":0}},{"generated":{"line":51,"column":0},"source":"index.js","original":{"line":52,"column":0}},{"generated":{"line":52,"column":0},"source":"index.js","original":{"line":53,"column":0}},{"generated":{"line":53,"column":0},"source":"index.js","original":{"line":54,"column":0}},{"generated":{"line":55,"column":0},"source":"index.js","original":{"line":56,"column":0}},{"generated":{"line":56,"column":0},"source":"index.js","original":{"line":57,"column":0}},{"generated":{"line":57,"column":0},"source":"index.js","original":{"line":58,"column":0}},{"generated":{"line":58,"column":0},"source":"index.js","original":{"line":59,"column":0}},{"generated":{"line":59,"column":0},"source":"index.js","original":{"line":60,"column":0}},{"generated":{"line":60,"column":0},"source":"index.js","original":{"line":61,"column":0}},{"generated":{"line":62,"column":0},"source":"index.js","original":{"line":63,"column":0}},{"generated":{"line":63,"column":0},"source":"index.js","original":{"line":64,"column":0}},{"generated":{"line":64,"column":0},"source":"index.js","original":{"line":65,"column":0}},{"generated":{"line":65,"column":0},"source":"index.js","original":{"line":66,"column":0}},{"generated":{"line":66,"column":0},"source":"index.js","original":{"line":67,"column":0}},{"generated":{"line":67,"column":0},"source":"index.js","original":{"line":68,"column":0}},{"generated":{"line":68,"column":0},"source":"index.js","original":{"line":69,"column":0}},{"generated":{"line":70,"column":0},"source":"index.js","original":{"line":71,"column":0}},{"generated":{"line":71,"column":0},"source":"index.js","original":{"line":72,"column":0}},{"generated":{"line":72,"column":0},"source":"index.js","original":{"line":73,"column":0}},{"generated":{"line":73,"column":0},"source":"index.js","original":{"line":74,"column":0}},{"generated":{"line":74,"column":0},"source":"index.js","original":{"line":75,"column":0}},{"generated":{"line":75,"column":0},"source":"index.js","original":{"line":76,"column":0}},{"generated":{"line":76,"column":0},"source":"index.js","original":{"line":77,"column":0}},{"generated":{"line":77,"column":0},"source":"index.js","original":{"line":78,"column":0}},{"generated":{"line":78,"column":0},"source":"index.js","original":{"line":79,"column":4}},{"generated":{"line":79,"column":0},"source":"index.js","original":{"line":80,"column":4}},{"generated":{"line":80,"column":0},"source":"index.js","original":{"line":81,"column":4}},{"generated":{"line":81,"column":0},"source":"index.js","original":{"line":82,"column":4}},{"generated":{"line":82,"column":0},"source":"index.js","original":{"line":83,"column":4}},{"generated":{"line":83,"column":0},"source":"index.js","original":{"line":84,"column":4}},{"generated":{"line":84,"column":0},"source":"index.js","original":{"line":85,"column":4}},{"generated":{"line":85,"column":0},"source":"index.js","original":{"line":86,"column":4}},{"generated":{"line":86,"column":0},"source":"index.js","original":{"line":87,"column":4}},{"generated":{"line":88,"column":0},"source":"index.js","original":{"line":89,"column":0}},{"generated":{"line":89,"column":0},"source":"index.js","original":{"line":90,"column":0}},{"generated":{"line":90,"column":0},"source":"index.js","original":{"line":91,"column":0}},{"generated":{"line":90,"column":4},"source":"index.js","original":{"line":91,"column":6},"name":"button"},{"generated":{"line":90,"column":10},"source":"index.js","original":{"line":91,"column":12}},{"generated":{"line":90,"column":13},"source":"index.js","original":{"line":91,"column":15},"name":"document"},{"generated":{"line":90,"column":21},"source":"index.js","original":{"line":91,"column":23}},{"generated":{"line":90,"column":22},"source":"index.js","original":{"line":91,"column":24},"name":"querySelector"},{"generated":{"line":90,"column":35},"source":"index.js","original":{"line":91,"column":37}},{"generated":{"line":90,"column":36},"source":"index.js","original":{"line":91,"column":38}},{"generated":{"line":90,"column":42},"source":"index.js","original":{"line":91,"column":44}},{"generated":{"line":90,"column":43},"source":"index.js","original":{"line":91,"column":45}},{"generated":{"line":91,"column":0},"source":"index.js","original":{"line":92,"column":0}},{"generated":{"line":92,"column":0},"source":"index.js","original":{"line":93,"column":0}},{"generated":{"line":93,"column":0},"source":"index.js","original":{"line":94,"column":0}},{"generated":{"line":94,"column":0},"source":"index.js","original":{"line":95,"column":0}},{"generated":{"line":95,"column":0},"source":"index.js","original":{"line":96,"column":0}},{"generated":{"line":96,"column":0},"source":"index.js","original":{"line":97,"column":0}},{"generated":{"line":97,"column":0},"source":"index.js","original":{"line":98,"column":0}},{"generated":{"line":98,"column":0},"source":"index.js","original":{"line":99,"column":0}},{"generated":{"line":99,"column":0},"source":"index.js","original":{"line":100,"column":0}},{"generated":{"line":100,"column":0},"source":"index.js","original":{"line":101,"column":0}},{"generated":{"line":101,"column":0},"source":"index.js","original":{"line":102,"column":0}},{"generated":{"line":102,"column":0},"source":"index.js","original":{"line":103,"column":0}},{"generated":{"line":103,"column":0},"source":"index.js","original":{"line":104,"column":0}},{"generated":{"line":104,"column":0},"source":"index.js","original":{"line":105,"column":0}},{"generated":{"line":105,"column":0},"source":"index.js","original":{"line":106,"column":0}},{"generated":{"line":106,"column":0},"source":"index.js","original":{"line":107,"column":0}},{"generated":{"line":107,"column":0},"source":"index.js","original":{"line":108,"column":0}},{"generated":{"line":108,"column":0},"source":"index.js","original":{"line":109,"column":0}},{"generated":{"line":109,"column":0},"source":"index.js","original":{"line":110,"column":0}},{"generated":{"line":110,"column":0},"source":"index.js","original":{"line":111,"column":0}},{"generated":{"line":112,"column":0},"source":"index.js","original":{"line":113,"column":0}},{"generated":{"line":113,"column":0},"source":"index.js","original":{"line":114,"column":0}},{"generated":{"line":114,"column":0},"source":"index.js","original":{"line":115,"column":0}},{"generated":{"line":115,"column":0},"source":"index.js","original":{"line":116,"column":0}},{"generated":{"line":116,"column":0},"source":"index.js","original":{"line":117,"column":0}},{"generated":{"line":117,"column":0},"source":"index.js","original":{"line":118,"column":0}},{"generated":{"line":118,"column":0},"source":"index.js","original":{"line":119,"column":0}},{"generated":{"line":119,"column":0},"source":"index.js","original":{"line":120,"column":0}},{"generated":{"line":120,"column":0},"source":"index.js","original":{"line":121,"column":0}},{"generated":{"line":121,"column":0},"source":"index.js","original":{"line":122,"column":0}},{"generated":{"line":122,"column":0},"source":"index.js","original":{"line":123,"column":0}},{"generated":{"line":123,"column":0},"source":"index.js","original":{"line":124,"column":0}},{"generated":{"line":124,"column":0},"source":"index.js","original":{"line":125,"column":0}},{"generated":{"line":125,"column":0},"source":"index.js","original":{"line":126,"column":0}},{"generated":{"line":126,"column":0},"source":"index.js","original":{"line":127,"column":0}},{"generated":{"line":128,"column":0},"source":"index.js","original":{"line":129,"column":0}},{"generated":{"line":129,"column":0},"source":"index.js","original":{"line":130,"column":0}},{"generated":{"line":130,"column":0},"source":"index.js","original":{"line":131,"column":0}},{"generated":{"line":132,"column":0},"source":"index.js","original":{"line":133,"column":0}},{"generated":{"line":133,"column":0},"source":"index.js","original":{"line":134,"column":0}},{"generated":{"line":134,"column":0},"source":"index.js","original":{"line":135,"column":0}},{"generated":{"line":135,"column":0},"source":"index.js","original":{"line":136,"column":0}},{"generated":{"line":136,"column":0},"source":"index.js","original":{"line":137,"column":0}},{"generated":{"line":137,"column":0},"source":"index.js","original":{"line":138,"column":0}},{"generated":{"line":138,"column":0},"source":"index.js","original":{"line":139,"column":0}},{"generated":{"line":139,"column":0},"source":"index.js","original":{"line":140,"column":0}},{"generated":{"line":140,"column":0},"source":"index.js","original":{"line":141,"column":0}},{"generated":{"line":141,"column":0},"source":"index.js","original":{"line":142,"column":0}},{"generated":{"line":142,"column":0},"source":"index.js","original":{"line":143,"column":0}},{"generated":{"line":143,"column":0},"source":"index.js","original":{"line":144,"column":0}},{"generated":{"line":145,"column":0},"source":"index.js","original":{"line":146,"column":0}},{"generated":{"line":147,"column":0},"source":"index.js","original":{"line":148,"column":0}},{"generated":{"line":147,"column":4},"source":"index.js","original":{"line":148,"column":6},"name":"observable"},{"generated":{"line":147,"column":14},"source":"index.js","original":{"line":148,"column":16}},{"generated":{"line":147,"column":17},"source":"index.js","original":{"line":148,"column":19}},{"generated":{"line":147,"column":21},"source":"index.js","original":{"line":148,"column":19},"name":"fromEvent"},{"generated":{"line":147,"column":36},"source":"index.js","original":{"line":148,"column":28}},{"generated":{"line":147,"column":38},"source":"index.js","original":{"line":149,"column":4},"name":"button"},{"generated":{"line":147,"column":44},"source":"index.js","original":{"line":149,"column":10}},{"generated":{"line":147,"column":46},"source":"index.js","original":{"line":149,"column":12}},{"generated":{"line":147,"column":53},"source":"index.js","original":{"line":149,"column":19}},{"generated":{"line":147,"column":54},"source":"index.js","original":{"line":150,"column":1}},{"generated":{"line":147,"column":55},"source":"index.js","original":{"line":150,"column":2},"name":"pipe"},{"generated":{"line":147,"column":59},"source":"index.js","original":{"line":150,"column":6}},{"generated":{"line":147,"column":60},"source":"index.js","original":{"line":151,"column":4}},{"generated":{"line":147,"column":64},"source":"index.js","original":{"line":151,"column":4},"name":"exhaustMap"},{"generated":{"line":147,"column":85},"source":"index.js","original":{"line":151,"column":14}},{"generated":{"line":147,"column":87},"source":"index.js","original":{"line":151,"column":15}},{"generated":{"line":147,"column":99},"source":"index.js","original":{"line":151,"column":21}},{"generated":{"line":148,"column":2},"source":"index.js","original":{"line":152,"column":8}},{"generated":{"line":148,"column":9},"source":"index.js","original":{"line":152,"column":15},"name":"ajax"},{"generated":{"line":148,"column":19},"source":"index.js","original":{"line":152,"column":19}},{"generated":{"line":148,"column":20},"source":"index.js","original":{"line":152,"column":20},"name":"getJSON"},{"generated":{"line":148,"column":27},"source":"index.js","original":{"line":152,"column":27}},{"generated":{"line":148,"column":28},"source":"index.js","original":{"line":152,"column":28}},{"generated":{"line":148,"column":74},"source":"index.js","original":{"line":152,"column":74}},{"generated":{"line":148,"column":75},"source":"index.js","original":{"line":152,"column":75}},{"generated":{"line":148,"column":76},"source":"index.js","original":{"line":152,"column":76},"name":"pipe"},{"generated":{"line":148,"column":80},"source":"index.js","original":{"line":152,"column":80}},{"generated":{"line":148,"column":81},"source":"index.js","original":{"line":153,"column":12}},{"generated":{"line":148,"column":85},"source":"index.js","original":{"line":153,"column":12},"name":"take"},{"generated":{"line":148,"column":100},"source":"index.js","original":{"line":153,"column":16}},{"generated":{"line":148,"column":102},"source":"index.js","original":{"line":153,"column":17}},{"generated":{"line":148,"column":103},"source":"index.js","original":{"line":153,"column":18}},{"generated":{"line":148,"column":104},"source":"index.js","original":{"line":153,"column":19}},{"generated":{"line":148,"column":106},"source":"index.js","original":{"line":154,"column":13}},{"generated":{"line":148,"column":110},"source":"index.js","original":{"line":154,"column":13},"name":"tap"},{"generated":{"line":148,"column":124},"source":"index.js","original":{"line":154,"column":16}},{"generated":{"line":148,"column":126},"source":"index.js","original":{"line":154,"column":17}},{"generated":{"line":149,"column":4},"source":"index.js","original":{"line":155,"column":16},"name":"complete"},{"generated":{"line":149,"column":12},"source":"index.js","original":{"line":155,"column":24}},{"generated":{"line":149,"column":34},"source":"index.js","original":{"line":155,"column":27}},{"generated":{"line":150,"column":6},"source":"index.js","original":{"line":155,"column":28},"name":"console"},{"generated":{"line":150,"column":13},"source":"index.js","original":{"line":155,"column":35}},{"generated":{"line":150,"column":14},"source":"index.js","original":{"line":155,"column":36},"name":"log"},{"generated":{"line":150,"column":17},"source":"index.js","original":{"line":155,"column":39}},{"generated":{"line":150,"column":18},"source":"index.js","original":{"line":155,"column":40}},{"generated":{"line":150,"column":46},"source":"index.js","original":{"line":155,"column":68}},{"generated":{"line":150,"column":47},"source":"index.js","original":{"line":155,"column":69}},{"generated":{"line":151,"column":4},"source":"index.js","original":{"line":155,"column":69}},{"generated":{"line":152,"column":2},"source":"index.js","original":{"line":156,"column":13}},{"generated":{"line":152,"column":3},"source":"index.js","original":{"line":156,"column":14}},{"generated":{"line":152,"column":4},"source":"index.js","original":{"line":156,"column":15}},{"generated":{"line":152,"column":5},"source":"index.js","original":{"line":157,"column":17}},{"generated":{"line":153,"column":0},"source":"index.js","original":{"line":158,"column":4}},{"generated":{"line":153,"column":1},"source":"index.js","original":{"line":158,"column":5}},{"generated":{"line":153,"column":2},"source":"index.js","original":{"line":158,"column":6}},{"generated":{"line":153,"column":3},"source":"index.js","original":{"line":159,"column":1}},{"generated":{"line":154,"column":0},"source":"index.js","original":{"line":160,"column":0}},{"generated":{"line":154,"column":4},"source":"index.js","original":{"line":160,"column":6},"name":"subscription"},{"generated":{"line":154,"column":16},"source":"index.js","original":{"line":160,"column":18}},{"generated":{"line":154,"column":19},"source":"index.js","original":{"line":160,"column":21},"name":"observable"},{"generated":{"line":154,"column":29},"source":"index.js","original":{"line":160,"column":31}},{"generated":{"line":154,"column":30},"source":"index.js","original":{"line":160,"column":32},"name":"subscribe"},{"generated":{"line":154,"column":39},"source":"index.js","original":{"line":160,"column":41}},{"generated":{"line":154,"column":40},"source":"index.js","original":{"line":160,"column":42},"name":"console"},{"generated":{"line":154,"column":47},"source":"index.js","original":{"line":160,"column":49}},{"generated":{"line":154,"column":48},"source":"index.js","original":{"line":160,"column":50},"name":"log"},{"generated":{"line":154,"column":51},"source":"index.js","original":{"line":160,"column":53}},{"generated":{"line":154,"column":52},"source":"index.js","original":{"line":160,"column":54}},{"generated":{"line":156,"column":0},"source":"index.js","original":{"line":162,"column":0}},{"generated":{"line":157,"column":0},"source":"index.js","original":{"line":163,"column":0}},{"generated":{"line":158,"column":0},"source":"index.js","original":{"line":164,"column":0}},{"generated":{"line":159,"column":0},"source":"index.js","original":{"line":165,"column":0}},{"generated":{"line":160,"column":0},"source":"index.js","original":{"line":166,"column":0}},{"generated":{"line":162,"column":0},"source":"index.js","original":{"line":168,"column":0}},{"generated":{"line":164,"column":0},"source":"index.js","original":{"line":170,"column":0}},{"generated":{"line":166,"column":0},"source":"index.js","original":{"line":172,"column":0}}],"sources":{"index.js":"import {fromEvent, interval, timer,of, from } from 'rxjs';\r\nimport {map ,pluck,filter,reduce,take,scan,tap,mergeMap,switchMap,concatMap,exhaustMap} from 'rxjs/operators';\r\nimport { ajax } from \"rxjs/ajax\";\r\n\r\n//MORE RxJs observables with diagrams at https://rxmarbles.com/\r\n\r\n//fromEvent - works as event listener\r\n// const observable = fromEvent(document, 'click');\r\n\r\n//interval() - calls observable on interval of time\r\n// const observable = interval(1000);\r\n\r\n//timer() - sets timer 1 argument) - timeInterval or date before the interval of repetitions starts\r\n//2 argument) - time between the repetitions\r\n// const observable = timer(1000,1000);\r\n\r\n//\"of\" will iterate over the values we add as he create observer and synchronously call observer push the value and complete it\r\n//before start pushing next value if we add array it reads it as 1 elemnt\r\n//const observable = of(1,2,3,4,5);\r\n\r\n//\"from\" is very POWERFUL operator work same way as \"of\" but works with arrays,promises, AsyncIterable and iterable streams \r\n//const observable = from([1,2,3,4,5])\r\n//it can also fetch() data from server\r\n//const observable = from(fetch('https://jsonplaceholder.typicode.com/todos/1'))\r\n \r\n//map() - can manipulate any passed value via so called pipe-function\r\n// const observable = of(1,2,3,4,5).pipe(\r\n//     //add $ in front of every number\r\n//     map((x) => `$${x}`)\r\n// )\r\n\r\n\r\n//pluck('propertyName') - pluck() gives us the value from  given property name in object\r\n// const observable = fromEvent(document, 'keydown').pipe(\r\n//     pluck('code')\r\n// )\r\n// same as:\r\n// const observable = fromEvent(document, 'keydown').pipe(\r\n//     map(event => event.code)\r\n// )\r\n\r\n\r\n//filter() - filters by given criterias\r\n// const observable = fromEvent(document, 'keydown'\r\n// ).pipe(\r\n//          pluck('code'),\r\n//          filter(code => code === 'Space')\r\n//     )\r\n\r\n//reduce() - adds values to accumulator , second argument is the starting value of accumulator in this case is '0'\r\n//reduce waits until observer adds all the values and then returns value\r\n// const observable = of(1,2,3,4,5).pipe(\r\n//     reduce((acc, value) => acc + value ,0)\r\n// )\r\n\r\n//take(5) - takes the first 5 elements given to observeble\r\n// const observable = interval(500\r\n//     ).pipe(\r\n//         take(5),\r\n//         reduce((acc, value) => acc + value ,0)\r\n//     )\r\n\r\n//scan() works same as reduce() but doesn't wait for observerble to complete and returns everu accumulated value.\r\n//it helps to check every accumulated value!!!\r\n// const observable = interval(500\r\n//     ).pipe(\r\n//         take(5),\r\n//         scan((acc, value) => acc + value ,0)\r\n//     )\r\n\r\n//tap() - everything what happens in pipeline can be observed with this operator as it ignores all changes\r\n// it make's it perfect for debuging.\r\n// const observable = interval(500\r\n//     ).pipe(\r\n//         take(5),\r\n//         tap(console.log),\r\n//         reduce((acc, value) => acc + value ,0)\r\n//     )\r\n    //tap() can accept objects too(same result as above):\r\n    // const observable = interval(500\r\n    //     ).pipe(\r\n    //         take(5),\r\n    //         tap({\r\n    //             next(val){console.log(val)}\r\n    //         }),\r\n    //         reduce((acc, value) => acc + value ,0)\r\n    //     )\r\n\r\n//mergeMap() -\r\n//example 1) works as map() but gets/handles also the result from the server (while map() just makes request in this case)\r\nconst button = document.querySelector('#btn')\r\n// const observable = fromEvent(\r\n//     button, 'click' \r\n// ).pipe(\r\n//     mergeMap(() => {\r\n//         return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1')\r\n//     })\r\n// )\r\n//example 2) mergeMap() will always subscribe to any inner observable which can lead to memory leaks\r\n// const observable = fromEvent(\r\n//     button, 'click' \r\n// ).pipe(\r\n//     mergeMap(() => {\r\n//         return interval(1000).pipe(\r\n//              tap(console.log),\r\n//                 take(5)\r\n//                 )\r\n//     })\r\n// )\r\n//as we see once started will never stop it will return value and continue to subscribe on every click\r\n//thats why we have to use something like take() after it to make it stop in some conditions\r\n\r\n//switchMap() - works as mergeMap() but understants when inner observeble is completed\r\n// is perfect to manage one observebla at a time \r\n//very useful for managing server reguests because if user click twice on a button insted to make 2 requests switchMap() will cancel the first request\r\n// const observable = fromEvent(\r\n//     button, 'click' \r\n// ).pipe(\r\n//     switchMap(() => {\r\n//         return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\r\n//             take(5),\r\n//              tap({ \r\n//                 complete() {console.log('inner observable completed')}\r\n//              }),\r\n//                 )\r\n//     })\r\n// )\r\n\r\n//concatMap() - works similary as switchMap() but instead canceling the second observable, puts it on a queue and when the first is ready starts the second one\r\n//like that we can manage multiply observables without canceling any of them\r\n//for example if we wanna send many requests one after another to the server\r\n\r\n// const observable = fromEvent(\r\n//     button, 'click' \r\n// ).pipe(\r\n//     concatMap(() => {\r\n//         return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\r\n//             take(5),\r\n//              tap({ \r\n//                 complete() {console.log('inner observable completed')}\r\n//              }),\r\n//                 )\r\n//     })\r\n// )\r\n\r\n//exhaustMap() - ignores second observable useful to prevent multiply form submisions via double click\r\n\r\nconst observable = fromEvent(\r\n    button, 'click' \r\n).pipe(\r\n    exhaustMap(() => {\r\n        return ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe(\r\n            take(5),\r\n             tap({ \r\n                complete() {console.log('inner observable completed')}\r\n             }),\r\n                )\r\n    })\r\n)\r\nconst subscription = observable.subscribe(console.log)\r\n\r\n//Conclusion(recap flattening operators) \r\n//Let's say you are chef and you are woking on a order but in that time \r\n//more orders comming if you use:\r\n//switchMap() - you should stop working on the curent order and start the new one \r\n//this way only tha latest order will ever be finished\r\n\r\n//concstMap() - the order gets added to a queue. finishing the current will start next one\r\n\r\n//mergeMap() - You will work on all orders at the same time as soon as you get them.\r\n\r\n//exhaustMap() - You ignore new orders and finish the current order. Once you finished you are free to accept new one.\r\n"},"lineCount":null}},"error":null,"hash":"1aff86dade47ea7d19e596546b3eaad9","cacheData":{"env":{}}}